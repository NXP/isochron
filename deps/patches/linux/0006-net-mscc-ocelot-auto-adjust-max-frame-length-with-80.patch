From 65ff0a725312350c37c68496e83b788852d793ed Mon Sep 17 00:00:00 2001
From: Vladimir Oltean <vladimir.oltean@nxp.com>
Date: Wed, 11 Mar 2020 19:30:10 +0200
Subject: [PATCH 6/7] net: mscc: ocelot: auto-adjust max frame length with
 802.1CB tags

It looks like ocelot has the ability to allow VLAN (single and double
tagged) traffic to be 4 bytes (and 8, respectively) larger than the
configured DEV_MAC_MAXLEN_CFG. This means that it can keep the SDU
(L2 payload) size configuration constant when the L2 header size
increases.

But unfortunately this is not the case with seamless redundancy. One can
easily observe that MTU-sized packets tagged with 802.1CB plus VLAN
exceed the configured frame length on RX, and therefore get dropped.

Simply increasing the maximum SDU size would be a bit of a hack, since
maybe the user wants to not allow any frames larger than 1500 bytes of
L2 payload.

So we opt for a slightly better hack, which is to repurpose the
programmable EtherType for the detection of second VLAN tag (the
implicit one being 0x8100). Luckily the tag format used by ocelot/felix
is 4 bytes in size, same as VLAN.

Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
---
 drivers/net/ethernet/mscc/ocelot_tsn.c | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/drivers/net/ethernet/mscc/ocelot_tsn.c b/drivers/net/ethernet/mscc/ocelot_tsn.c
index b8fcbfd810ce..7993a4ad36ff 100644
--- a/drivers/net/ethernet/mscc/ocelot_tsn.c
+++ b/drivers/net/ethernet/mscc/ocelot_tsn.c
@@ -17,6 +17,11 @@
 #include "ocelot_dev_gmii.h"
 #include "ocelot_tsn.h"
 
+/* May need to change to the one defined in the IEEE spec later, right now we
+ * want compatibility with the hardware default value
+ */
+#define ETH_P_8021CB		0x2345
+
 #define MSCC_NUM_OUT_PORT 4 /* Number of physical output ports */
 #define SE_IX_PORT 64
 
@@ -1526,6 +1531,21 @@ int ocelot_rtag_parse_enable(struct ocelot *ocelot, u8 port)
 		       ANA_PORT_MODE,
 		       port);
 
+	ocelot_write(ocelot, ETH_P_8021CB, SYS_SR_ETYPE_CFG);
+
+	/* No harm, no foul: we are telling the switch to adjust maximum frame
+	 * length for double-tagged VLANs lying that the EtherType for S-Tags
+	 * is the one for 802.1CB. This is not an issue because with 802.1CB
+	 * traffic, the switch will not parse more than 2 tags anyway, so
+	 * either it doesn't support 802.1CB or the second VLAN tag.
+	 */
+	ocelot_port_writel(ocelot->ports[port],
+			   DEV_MAC_TAGS_CFG_TAG_ID(ETH_P_8021CB) |
+			   DEV_MAC_TAGS_CFG_VLAN_AWR_ENA |
+			   DEV_MAC_TAGS_CFG_VLAN_DBL_AWR_ENA |
+			   DEV_MAC_TAGS_CFG_VLAN_LEN_AWR_ENA,
+			   DEV_MAC_TAGS_CFG);
+
 	return 0;
 }
 
-- 
2.17.1

