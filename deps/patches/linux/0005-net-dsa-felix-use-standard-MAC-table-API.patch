From d7de7d0b3acb22313045a0150181c2b73b1df483 Mon Sep 17 00:00:00 2001
From: Vladimir Oltean <vladimir.oltean@nxp.com>
Date: Tue, 15 Sep 2020 01:03:02 +0300
Subject: [PATCH 5/7] net: dsa: felix: use standard MAC table API

Simplify the 802.1CB stream ID code by using helper functions.
No functional change is intended.

Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
---
 drivers/net/dsa/ocelot/felix_tsn.c | 177 ++++++++---------------------
 1 file changed, 47 insertions(+), 130 deletions(-)

diff --git a/drivers/net/dsa/ocelot/felix_tsn.c b/drivers/net/dsa/ocelot/felix_tsn.c
index 71f64d673fc9..cd1fb6695eeb 100644
--- a/drivers/net/dsa/ocelot/felix_tsn.c
+++ b/drivers/net/dsa/ocelot/felix_tsn.c
@@ -547,50 +547,18 @@ static struct stream_filter *stream_table_get(u32 index)
 	return NULL;
 }
 
-static int lookup_mactable(struct ocelot *ocelot, u16 vid, u64 mac)
-{
-	u32 mach, macl;
-	u32 reg1, reg2;
-	u32 index, bucket;
-
-	macl = mac & 0xffffffff;
-	mach = (mac >> 32) & 0xffff;
-	ocelot_write(ocelot, macl, ANA_TABLES_MACLDATA);
-	ocelot_write(ocelot, ANA_TABLES_MACHDATA_VID(vid) |
-		     ANA_TABLES_MACHDATA_MACHDATA(mach),
-		     ANA_TABLES_MACHDATA);
-
-	ocelot_write(ocelot, ANA_TABLES_MACACCESS_VALID |
-		     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_READ),
-		     ANA_TABLES_MACACCESS);
-
-	reg1 = ocelot_read(ocelot, ANA_TABLES_MACLDATA);
-	reg2 = ocelot_read(ocelot, ANA_TABLES_MACHDATA);
-	if (reg1 != macl || reg2 != (mach | ANA_TABLES_MACHDATA_VID(vid)))
-		return -EEXIST;
-
-	regmap_field_read(ocelot->regfields[ANA_TABLES_MACTINDX_BUCKET],
-			  &bucket);
-	regmap_field_read(ocelot->regfields[ANA_TABLES_MACTINDX_M_INDEX],
-			  &index);
-
-	index = index * 4 + bucket;
-
-	return index;
-}
-
 static int felix_cb_streamid_set(struct net_device *ndev, u32 index, bool enable,
 				 struct tsn_cb_streamid *streamid)
 {
+	struct ocelot_mact_entry entry;
 	struct stream_filter *stream;
+	u32 m_index, bucket, dst_idx;
+	unsigned char mac[ETH_ALEN];
 	int idx, sfid, ssid, port;
-	u32 reg, m_index, bucket;
-	u32 macl, mach, dst_idx;
-	struct regmap_field *rf;
 	struct ocelot *ocelot;
 	struct dsa_port *dp;
 	u16 vid;
-	u64 mac;
+	int ret;
 
 	dp = dsa_port_from_netdev(ndev);
 	ocelot = dp->ds->priv;
@@ -607,22 +575,15 @@ static int felix_cb_streamid_set(struct net_device *ndev, u32 index, bool enable
 		if (!stream)
 			return -EINVAL;
 
-		m_index = stream->mact_idx / 4;
-		bucket =  stream->mact_idx % 4;
-		rf = ocelot->regfields[ANA_TABLES_MACTINDX_BUCKET];
-		regmap_field_write(rf, bucket);
-		rf = ocelot->regfields[ANA_TABLES_MACTINDX_M_INDEX];
-		regmap_field_write(rf, m_index);
-
-		/*READ command MACACCESS.VALID(11 bit) must be 0 */
-		ocelot_write(ocelot,
-			     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_READ),
-			     ANA_TABLES_MACACCESS);
+		m_index = index / 4;
+		bucket = index % 4;
 
-		ocelot_write(ocelot,
-			     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_FORGET),
-			     ANA_TABLES_MACACCESS);
+		ret = ocelot_mact_read(ocelot, m_index, bucket, &dst_idx,
+				       &entry);
+		if (ret)
+			return ret;
 
+		ocelot_mact_forget(ocelot, entry.mac, entry.vid);
 		stream_table_del(index);
 
 		return 0;
@@ -644,19 +605,14 @@ static int felix_cb_streamid_set(struct net_device *ndev, u32 index, bool enable
 	ssid = (streamid->handle < FELIX_FRER_SSID_NUM ?
 		streamid->handle : (FELIX_FRER_SSID_NUM - 1));
 
-	mac = streamid->para.nid.dmac;
-	macl = mac & 0xffffffff;
-	mach = (mac >> 32) & 0xffff;
+	u64_to_ether_addr(streamid->para.nid.dmac, mac);
 	vid = streamid->para.nid.vid;
 
-	idx = lookup_mactable(ocelot, vid, mac);
-
-	if (idx < 0) {
-		ocelot_write(ocelot, macl, ANA_TABLES_MACLDATA);
-		ocelot_write(ocelot, ANA_TABLES_MACHDATA_VID(vid) |
-			     ANA_TABLES_MACHDATA_MACHDATA(mach),
-			     ANA_TABLES_MACHDATA);
+	ret = ocelot_mact_lookup(ocelot, mac, vid, &m_index, &bucket);
+	if (ret && ret != -ENOENT)
+		return ret;
 
+	if (ret == -ENOENT) {
 		ocelot_write(ocelot,
 			     ANA_TABLES_STREAMDATA_SFID_VALID |
 			     ANA_TABLES_STREAMDATA_SFID(sfid) |
@@ -664,27 +620,24 @@ static int felix_cb_streamid_set(struct net_device *ndev, u32 index, bool enable
 			     ANA_TABLES_STREAMDATA_SSID(ssid),
 			     ANA_TABLES_STREAMDATA);
 
-		dst_idx = port;
-		ocelot_write(ocelot, ANA_TABLES_MACACCESS_VALID |
-			     ANA_TABLES_MACACCESS_ENTRYTYPE(1) |
-			     ANA_TABLES_MACACCESS_DEST_IDX(dst_idx) |
-			     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_LEARN),
-			     ANA_TABLES_MACACCESS);
+		ocelot_mact_learn(ocelot, port, mac, vid, ENTRYTYPE_LOCKED);
 
-		ocelot_write(ocelot, ANA_TABLES_MACACCESS_VALID |
-			     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_READ),
-			     ANA_TABLES_MACACCESS);
+		ret = ocelot_mact_lookup(ocelot, mac, vid, &m_index, &bucket);
+		if (ret)
+			return ret;
 
-		regmap_field_read(ocelot->regfields[ANA_TABLES_MACTINDX_BUCKET],
-				  &bucket);
-		regmap_field_read(ocelot->regfields[ANA_TABLES_MACTINDX_M_INDEX],
-				  &m_index);
-
-		m_index = m_index * 4 + bucket;
+		idx = m_index * 4 + bucket;
 
 		return stream_table_add(index, m_index, streamid->handle);
 	}
 
+	idx = m_index * 4 + bucket;
+
+	/* This is done just to retrieve the @dst_idx */
+	ret = ocelot_mact_read(ocelot, m_index, bucket, &dst_idx, &entry);
+	if (ret)
+		return ret;
+
 	ocelot_write(ocelot,
 		     ANA_TABLES_STREAMDATA_SFID_VALID |
 		     ANA_TABLES_STREAMDATA_SFID(sfid) |
@@ -692,13 +645,7 @@ static int felix_cb_streamid_set(struct net_device *ndev, u32 index, bool enable
 		     ANA_TABLES_STREAMDATA_SSID(ssid),
 		     ANA_TABLES_STREAMDATA);
 
-	reg = ocelot_read(ocelot, ANA_TABLES_MACACCESS);
-	dst_idx = ANA_TABLES_MACACCESS_DEST_IDX_X(reg);
-	ocelot_write(ocelot, ANA_TABLES_MACACCESS_VALID |
-		     ANA_TABLES_MACACCESS_ENTRYTYPE(1) |
-		     ANA_TABLES_MACACCESS_DEST_IDX(dst_idx) |
-		     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_WRITE),
-		     ANA_TABLES_MACACCESS);
+	ocelot_mact_write(ocelot, dst_idx, &entry, m_index, bucket);
 
 	return stream_table_add(index, idx, streamid->handle);
 }
@@ -706,13 +653,13 @@ static int felix_cb_streamid_set(struct net_device *ndev, u32 index, bool enable
 static int felix_cb_streamid_get(struct net_device *ndev, u32 index,
 				 struct tsn_cb_streamid *streamid)
 {
+	struct ocelot_mact_entry entry;
 	struct stream_filter *stream;
 	struct ocelot *ocelot;
 	struct dsa_port *dp;
+	u32 val, dst, fwdmask;
 	u32 m_index, bucket;
-	u32 val, dst, reg;
-	u32 ldmac, hdmac;
-	u64 dmac;
+	int ret;
 
 	dp = dsa_port_from_netdev(ndev);
 	ocelot = dp->ds->priv;
@@ -731,31 +678,16 @@ static int felix_cb_streamid_get(struct net_device *ndev, u32 index,
 	m_index = stream->mact_idx / 4;
 	bucket =  stream->mact_idx % 4;
 	streamid->type = 1;
-	regmap_field_write(ocelot->regfields[ANA_TABLES_MACTINDX_BUCKET],
-			   bucket);
-	regmap_field_write(ocelot->regfields[ANA_TABLES_MACTINDX_M_INDEX],
-			   m_index);
-
-	/*READ command MACACCESS.VALID(11 bit) must be 0 */
-	ocelot_write(ocelot,
-		     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_READ),
-		     ANA_TABLES_MACACCESS);
 
-	val = ocelot_read(ocelot, ANA_TABLES_MACACCESS);
-	dst = ANA_TABLES_MACACCESS_DEST_IDX_X(val);
-	reg = ocelot_read_rix(ocelot, ANA_PGID_PGID, dst);
-	streamid->ofac_oport = ANA_PGID_PGID_PGID(reg);
+	ret = ocelot_mact_read(ocelot, m_index, bucket, &dst, &entry);
+	if (ret)
+		return ret;
 
-	/*Get the entry's MAC address and VLAN id*/
-	ldmac = ocelot_read(ocelot, ANA_TABLES_MACLDATA);
-	val = ocelot_read(ocelot, ANA_TABLES_MACHDATA);
-	val &= 0x1fffffff;
-	hdmac = val & 0xffff;
-	dmac = hdmac;
-	dmac = (dmac << 32) | ldmac;
-	streamid->para.nid.dmac = dmac;
+	fwdmask = ocelot_read_rix(ocelot, ANA_PGID_PGID, dst);
+	streamid->ofac_oport = ANA_PGID_PGID_PGID(fwdmask);
 
-	streamid->para.nid.vid = ANA_TABLES_MACHDATA_VID_X(val);
+	streamid->para.nid.dmac = ether_addr_to_u64(entry.mac);
+	streamid->para.nid.vid = entry.vid;
 
 	val = ocelot_read(ocelot, ANA_TABLES_STREAMDATA);
 	if (!(val & ANA_TABLES_STREAMDATA_SFID_VALID))
@@ -769,34 +701,19 @@ static int felix_cb_streamid_get(struct net_device *ndev, u32 index,
 static int streamid_multi_forward_set(struct ocelot *ocelot, u32 index,
 				      u8 fwdmask)
 {
-	u32 m_index, bucket;
-	u8 fwdport;
-	u32 val;
+	int ret, m_index, bucket, fwdport;
+	struct ocelot_mact_entry entry;
 
 	m_index = index / 4;
-	bucket =  index % 4;
-
-	regmap_field_write(ocelot->regfields[ANA_TABLES_MACTINDX_BUCKET],
-			   bucket);
-	regmap_field_write(ocelot->regfields[ANA_TABLES_MACTINDX_M_INDEX],
-			   m_index);
-
-	/*READ command MACACCESS.VALID(11 bit) must be 0 */
-	ocelot_write(ocelot,
-		     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_READ),
-		     ANA_TABLES_MACACCESS);
-
-	val = ocelot_read(ocelot, ANA_TABLES_MACACCESS);
-	fwdport = ANA_TABLES_MACACCESS_DEST_IDX_X(val);
+	bucket = index % 4;
 
-	fwdmask |= (1 << fwdport);
+	ret = ocelot_mact_read(ocelot, m_index, bucket, &fwdport, &entry);
+	if (ret)
+		return ret;
 
-	ocelot_write(ocelot, ANA_TABLES_MACACCESS_VALID |
-		     ANA_TABLES_MACACCESS_ENTRYTYPE(1) |
-		     ANA_TABLES_MACACCESS_DEST_IDX(PGID_FRER) |
-		     ANA_TABLES_MACACCESS_MAC_TABLE_CMD(MACACCESS_CMD_WRITE),
-		     ANA_TABLES_MACACCESS);
+	fwdmask |= BIT(fwdport);
 
+	ocelot_mact_write(ocelot, PGID_FRER, &entry, m_index, bucket);
 	ocelot_write_rix(ocelot, fwdmask, ANA_PGID_PGID, PGID_FRER);
 
 	return 0;
-- 
2.25.1

